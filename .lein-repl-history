(lein)
(require 'hiccup.core)
(form-to [:post "/login"]
  (text-field {:placeholder "screen name"} "id")
  (password-field {:placeholder "password"} "pass")
  (submit-button "login"))
(image {:align "left"} "foo.png")
(html [:script])
(use 'hiccup.core)
(html [:script])
(form-to [:post "/login"]
  (text-field {:placeholder "screen name"} "id")
  (password-field {:placeholder "password"} "pass")
  (submit-button "login"))
(image {:align "left"} "foo.png")
[:div {:id "hello", :class "content"} [:p "Hello world!"]]
(html [:div#foo.bar.baz "bang"])
(html (form-to [:post "/login"]
  (text-field {:placeholder "screen name"} "id")
  (password-field {:placeholder "password"} "pass")
  (submit-button "login")))
(html (image {:align "left"} "foo.png"))
(html [:ul
               (for [x (range 1 4)]
                 [:li x])])
(use 'hiccup.util)
(submit-button attr-map? text)
(html (submit-button attr-map? text))
(text-field attr-map? name)
(use 'hiccup.form)
(text-field attr-map? name)
](use hiccup.form)
(use 'hiccup.fomr)
(use 'hiccupe.form)
(use 'hiccup.form)
(form-to [:post "/login"]
  (text-field {:placeholder "screen name"} "id")
  (password-field {:placeholder "password"} "pass")
  (submit-button "login"))
(html (form-to [:post "/login"]
  (text-field {:placeholder "screen name"} "id")
  (password-field {:placeholder "password"} "pass")
  (submit-button "login")))
(def loggin
  (hc/html (hf/form-to [:post "/login"]
    (hf/text-field {:placeholder "screen name"} "id")
    (hf/password-field {:placeholder "password"} "pass")
    (hf/submit-button "login"))))
(def loggin
  (html (hf/form-to [:post "/login"]
    (text-field {:placeholder "screen name"} "id")
    (password-field {:placeholder "password"} "pass")
    (submit-button "login"))))
(def loggin
  (html (form-to [:post "/login"]
    (text-field {:placeholder "screen name"} "id")
    (password-field {:placeholder "password"} "pass")
    (submit-button "login"))))
loggin
(require '[hiccup.form :as hf])
(require '[hiccu[.core :as hc])
(require ' [hiccup.core :as hc])
(def loggin
  (hc/html (hf/form-to [:post "/login"]
    (hf/text-field {:placeholder "screen name"} "id")
    (hf/password-field {:placeholder "password"} "pass")
    (hf/submit-button "login"))))
(loggin)
'(loggin)
loggin
(str loggin)
(defn loggin []
  (hc/html (hf/form-to [:post "/login"]
    (hf/text-field {:placeholder "screen name"} "id")
    (hf/password-field {:placeholder "password"} "pass")
    (hf/submit-button "login"))))
(loggin)
(map loggin)
(list loggin)
(loggin)
loggin
(loggin)
dwa
2
"w"
loggin
(def loggin
  (hc/html (hf/form-to [:post "/login"]
    (hf/text-field {:placeholder "screen name"} "id")
    (hf/password-field {:placeholder "password"} "pass")
    (hf/submit-button "login"))))
loggin
'(loggin)
'loggin
(val loggin)
(str loggin)
(println loggin)
(doc merge)
(merge params {:asd 2 :dsad 33))
(merge {:asd 2 :asd 32)
(merge {:po 2 :df 445} {:ds 2 :t 5})
(quit)
(hf/text-field)
(use  [hiccup.form :as hf])
(use ' [hiccup.form :as hf])
(hf/text-field)
(use '[hiccup.core :as hc])
(hc/table)
(table0
(table)
(hc/html table)
(defn books []
  [{:author "Fogus M., Houser C."
    :title "The Joy Of Clojure"
    :year "2011"
    :format "pdf"
    :id 1}
   {:author "Fogus M., Houser C."
    :title "The Joy Of Clojure"
    :year "2011"
    :format "epub"
    :id 2}])
(defn- list-books []
  [:table
   [:thead
    [:tr
     [:th "Author"]
     [:th "Title"]
     [:th "Published"]
     [:th "Format"]]]
   (into [:tbody]
         (for [book (books)]
           [:tr
            [:td (:author book)]
            [:td (:title book)]
            [:td (:year book)]
            [:td (link-to (clojure.string/join "/" ["/books" (:id book) (:format book)])
                          (:format book))]]))])
(defn- list-books []
  [:table
   [:thead
    [:tr
     [:th "Author"]
     [:th "Title"]
     [:th "Published"]
     [:th "Format"]]]
   (into [:tbody]
         (for [book (books)]
           [:tr
            [:td (:author book)]
            [:td (:title book)]
            [:td (:year book)]]))
)
(defn- list-books []
  [:table
   [:thead
    [:tr
     [:th "Author"]
     [:th "Title"]
     [:th "Published"]
     [:th "Format"]]]
   (into [:tbody]
         (for [book (books)]
           [:tr
            [:td (:author book)]
            [:td (:title book)]
            [:td (:year book)]]))])
list-books
(list-books)
(common
)
(email-field attr-map? name)
(quit)
(ns myapp.util
  (:require [noir.io :as io]
            [markdown.core :as md]
            [hiccup.form :as hf]
            [hiccup.core :as hc]
            [myapp.dbquery :as dbquery]))
(ns myapp.util
  (:require [noir.io :as io]
            [markdown.core :as md]
            [hiccup.form :as hf]
            [hiccup.core :as hc]
            [myapp.dbquery :as dbquery]))
(def center-selection
  (hc/html
    (hf/drop-down [center (dbquery/cost-on-center)] )))
(def center-selection
  (hc/html
    (hf/drop-down [dbquery/cost-on-center] )))
(doc drop-down)
(doc hf/drop-down)
(def center-selection
  (hc/html
    (hf/drop-down "drop" [dbquery/cost-on-center])))
center-selection
(def center-selection
  (hc/html
    (hf/drop-down "drop" [(dbquery/cost-on-center)])))
(center-selection)
center-selection
(dbquery/cost-on-center)
(def center-selection
  (hc/html
    (hf/drop-down "drop" [(dbquery/cost-on-center.plannedOnCenter)])))
(def center-selection
  (hc/html
    (hf/drop-down "drop" [(dbquery/cost-on-center)])))
center-selection
(defn cost-on-center []
(j/query mysql-db
(s/select :plannedOnCenter :cost_on_center)))
(ns myapp.dbquery
(:require 
[clojure.java.jdbc :as j]
[clojure.java.jdbc.sql :as s]))
(defn cost-on-center []
(j/query mysql-db
(s/select :plannedOnCenter :cost_on_center)))
cost-on-center
(cost-on-center)
‡O(ns myapp.util
  (:require [noir.io :as io]
            [markdown.core :as md]
            [hiccup.form :as hf]
            [hiccup.core :as hc]
            [myapp.dbquery :as dbquery]))
(ns myapp.util
  (:require [noir.io :as io]
            [markdown.core :as md]
            [hiccup.form :as hf]
            [hiccup.core :as hc]
            [myapp.dbquery :as dbquery]))
(def center-selection
  (hc/html
    (hf/drop-down "drop" [map(dbquery/cost-on-center)])))
center-selection
(def center-selection
  (hc/html
    (hf/drop-down "drop" [(map (dbquery/cost-on-center))])))
dbquery/cost-on-center
(dbquery/cost-on-center)
(vals dbquery/cost-on-center)
(keys dbquery/cost-on-center)
(:plannedoncenter dbquery/cost-on-center)
(keys (dbquery/cost-on-center))
((dbquery/cost-on-center :plannedoncenter))
(dbquery/cost-on-center :plannedoncenter)
(vals '(dbquery/cost-on-center))
(doc dbquery/cost-on-center)
(info dbquery/cost-on-center)
dbquery/cost-on-centerdbquery/cost-on-center
dbquery/cost-on-center
(doc (dbquery/cost-on-center))
'(dbquery/cost-on-center)
(first dbquery/cost-on-center)
(first (dbquery/cost-on-center))
(count (dbquery/cost-on-center))
(list? (dbquery/cost-on-center))
(map? (dbquery/cost-on-center))
(set? (dbquery/cost-on-center))
(vector? (dbquery/cost-on-center))
(map? (dbquery/cost-on-center))
#(dbquery/cost-on-center)
(seq? (dbquery/cost-on-center))
(1 dbquery/cost-on-center)
(dbquery/cost-on-center 1)
(dbquery/all)
(map (dbquery/cost-on-center))
(fn (dbquery/cost-on-center) [key val])
(:keys dbquery/cost-on-center)
(:keys (dbquery/cost-on-center))
(first dbquery/cost-on-center)
(first (dbquery/cost-on-center))
(vals (first (dbquery/cost-on-center)))
(vals (rest (dbquery/cost-on-center)
))
(vals (rest (dbquery/cost-on-center)))
(rest (dbquery/cost-on-center))
(vals (rest (dbquery/cost-on-center)))
(vals (first (dbquery/cost-on-center)))
(for [center (dbquery/cost-on-center) (vals center))
(for [center (dbquery/cost-on-center)] (vals center))
(ns myapp.dbquery
(:require 
[clojure.java.jdbc :as j]
[clojure.java.jdbc.sql :as s]))
(doc s/select)
(doc select
)
mysql-db
(doc query)
(doc j/query)
(defn cost-on-center []
(j/query mysql-db
["select distinct plannedOnCenter from cost_on_center"]
#_(s/select  :plannedOnCenter :cost_on_center)))
(cost-on-center)
(ns myapp.dbquery
(:require 
[clojure.java.jdbc :as j]
[clojure.java.jdbc.sql :as s]))
(defn get-user [id]
(j/query mysql-db
  (first (s/select :users
                 (where {:id id})
                 (limit 1)))))
(def mysql-db {
:subprotocol "mysql"
:subname "//localhost:3306/AXdb"
:user "root"
:password ""
:zeroDateTimeBehavior "convertToNull"})
(defn get-user [id]
(j/query mysql-db
  (first (s/select :users
                 (where {:id id})
                 (limit 1)))))
(defn get-user [id]
(j/query mysql-db
  (first ([select * from usesr where id = UserID ]))))
(defn get-user [id]
(j/query mysql-db
  [select * from usesr where id = UserID]))
(defn get-user [id]
(j/query mysql-db
  ["select * from usesr where id = UserID"]))
                 
(get user 12)
(get-user 123)
(defn get-user [id]
(j/query mysql-db
  ["select * from users where id = UserID"]))
(get-user 12)
(defn get-user [id]
(j/query mysql-db
  (s/select * :users :where id = UserID)))
(defn get-user [id]
(j/query mysql-db
  (s/select * :users :where id := :UserID)))
(get-user 12)
(defn get-user [id]
(j/query mysql-db
  (s/select * :users :where id = :UserID)))
                 
(get-user 12)
(get-user 50211)
(defn get-user [id]
(j/query mysql-db
["select * from users where ? = UserID"]))
(get-user 12)
(get-user 50211)
(defn get-user [id]
(first (j/query mysql-db
(s/select * :users (s/where {:UserId id})))))
(get-user 55060)
(get-user asd)
(get-user "asd")
(get-user "2=2")
(get-user "asd or 2 = 2")
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(quit)
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(defn handle-login [id pass]
  (let [user (dbquery/get-user id)]
    (if (and user (= pass (:password user)))
      (session/put! :user-id id))
    (resp/redirect "/")))
(hendle-login [(defn handle-login [id pass]
  (let [user (dbquery/get-user id)]
    (if (and user (= pass (:password user)))
      (session/put! :user-id id))
(hendle-login 50211 "asd")
(handle-login 50211 "asd")
(hendle-login [50211 "asd"])
(handle-login [50211 "asd"])
(handle-login "50211" "asd")
(session/get)
(session-get :user-id)
(session/get :user-id)
(empty? " ")
(empty? [])
(doc session/get)
(empty? (session/get :user-id)
)
(session/put! :user-id 12)
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
(session/put! :user-id 12)
(session/put! :user-id "asd")
(session/put! :user id)
(session/put! :user 12)
session/key
(session/key)
(quit)
(ns myapp.routes.auth
  (:use compojure.core)
  (:require [myapp.layout :as layout]
            [noir.session :as session]
            [noir.response :as resp]
            [noir.validation :as vali]
            [noir.util.crypt :as crypt]
            [myapp.db.core :as db]))
(ns myapp.routes.auth
  (:use compojure.core)
  (:require [myapp.layout :as layout]
            [noir.session :as session]
            [noir.response :as resp]
            [noir.validation :as vali]
            [noir.util.crypt :as crypt]
            [myapp.db.core :as db]))
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(empty? (session/get :user-id)
)
(session/clear!)
(quit)
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(handle-login 50211 "asd")
(defn handle-login [id pass]
  (let [user (dbquery/get-user id)]
    (if (and user (= pass (:password user)))
      (session/put! :user-id id)
    (resp/redirect "/"))))
(handle-login 50211 "asd")
home-page 
(home-page )
(home-page)
 (handle-login 50211 "asd")
(session/put! :user-id 50211)
(ns myapp.db.core
  (:use korma.core
        [korma.db :only (defdb)])
  (:require [myapp.db.schema :as schema]))
(quit)
