    (hf/drop-down "drop" [(dbquery/cost-on-center.plannedOnCenter)])))
(def center-selection
  (hc/html
    (hf/drop-down "drop" [(dbquery/cost-on-center)])))
center-selection
(defn cost-on-center []
(j/query mysql-db
(s/select :plannedOnCenter :cost_on_center)))
(ns myapp.dbquery
(:require 
[clojure.java.jdbc :as j]
[clojure.java.jdbc.sql :as s]))
(defn cost-on-center []
(j/query mysql-db
(s/select :plannedOnCenter :cost_on_center)))
cost-on-center
(cost-on-center)
‡O(ns myapp.util
  (:require [noir.io :as io]
            [markdown.core :as md]
            [hiccup.form :as hf]
            [hiccup.core :as hc]
            [myapp.dbquery :as dbquery]))
(ns myapp.util
  (:require [noir.io :as io]
            [markdown.core :as md]
            [hiccup.form :as hf]
            [hiccup.core :as hc]
            [myapp.dbquery :as dbquery]))
(def center-selection
  (hc/html
    (hf/drop-down "drop" [map(dbquery/cost-on-center)])))
center-selection
(def center-selection
  (hc/html
    (hf/drop-down "drop" [(map (dbquery/cost-on-center))])))
dbquery/cost-on-center
(dbquery/cost-on-center)
(vals dbquery/cost-on-center)
(keys dbquery/cost-on-center)
(:plannedoncenter dbquery/cost-on-center)
(keys (dbquery/cost-on-center))
((dbquery/cost-on-center :plannedoncenter))
(dbquery/cost-on-center :plannedoncenter)
(vals '(dbquery/cost-on-center))
(doc dbquery/cost-on-center)
(info dbquery/cost-on-center)
dbquery/cost-on-centerdbquery/cost-on-center
dbquery/cost-on-center
(doc (dbquery/cost-on-center))
'(dbquery/cost-on-center)
(first dbquery/cost-on-center)
(first (dbquery/cost-on-center))
(count (dbquery/cost-on-center))
(list? (dbquery/cost-on-center))
(map? (dbquery/cost-on-center))
(set? (dbquery/cost-on-center))
(vector? (dbquery/cost-on-center))
(map? (dbquery/cost-on-center))
#(dbquery/cost-on-center)
(seq? (dbquery/cost-on-center))
(1 dbquery/cost-on-center)
(dbquery/cost-on-center 1)
(dbquery/all)
(map (dbquery/cost-on-center))
(fn (dbquery/cost-on-center) [key val])
(:keys dbquery/cost-on-center)
(:keys (dbquery/cost-on-center))
(first dbquery/cost-on-center)
(first (dbquery/cost-on-center))
(vals (first (dbquery/cost-on-center)))
(vals (rest (dbquery/cost-on-center)
))
(vals (rest (dbquery/cost-on-center)))
(rest (dbquery/cost-on-center))
(vals (rest (dbquery/cost-on-center)))
(vals (first (dbquery/cost-on-center)))
(for [center (dbquery/cost-on-center) (vals center))
(for [center (dbquery/cost-on-center)] (vals center))
(ns myapp.dbquery
(:require 
[clojure.java.jdbc :as j]
[clojure.java.jdbc.sql :as s]))
(doc s/select)
(doc select
)
mysql-db
(doc query)
(doc j/query)
(defn cost-on-center []
(j/query mysql-db
["select distinct plannedOnCenter from cost_on_center"]
#_(s/select  :plannedOnCenter :cost_on_center)))
(cost-on-center)
(ns myapp.dbquery
(:require 
[clojure.java.jdbc :as j]
[clojure.java.jdbc.sql :as s]))
(defn get-user [id]
(j/query mysql-db
  (first (s/select :users
                 (where {:id id})
                 (limit 1)))))
(def mysql-db {
:subprotocol "mysql"
:subname "//localhost:3306/AXdb"
:user "root"
:password ""
:zeroDateTimeBehavior "convertToNull"})
(defn get-user [id]
(j/query mysql-db
  (first (s/select :users
                 (where {:id id})
                 (limit 1)))))
(defn get-user [id]
(j/query mysql-db
  (first ([select * from usesr where id = UserID ]))))
(defn get-user [id]
(j/query mysql-db
  [select * from usesr where id = UserID]))
(defn get-user [id]
(j/query mysql-db
  ["select * from usesr where id = UserID"]))
                 
(get user 12)
(get-user 123)
(defn get-user [id]
(j/query mysql-db
  ["select * from users where id = UserID"]))
(get-user 12)
(defn get-user [id]
(j/query mysql-db
  (s/select * :users :where id = UserID)))
(defn get-user [id]
(j/query mysql-db
  (s/select * :users :where id := :UserID)))
(get-user 12)
(defn get-user [id]
(j/query mysql-db
  (s/select * :users :where id = :UserID)))
                 
(get-user 12)
(get-user 50211)
(defn get-user [id]
(j/query mysql-db
["select * from users where ? = UserID"]))
(get-user 12)
(get-user 50211)
(defn get-user [id]
(first (j/query mysql-db
(s/select * :users (s/where {:UserId id})))))
(get-user 55060)
(get-user asd)
(get-user "asd")
(get-user "2=2")
(get-user "asd or 2 = 2")
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(quit)
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(defn handle-login [id pass]
  (let [user (dbquery/get-user id)]
    (if (and user (= pass (:password user)))
      (session/put! :user-id id))
    (resp/redirect "/")))
(hendle-login [(defn handle-login [id pass]
  (let [user (dbquery/get-user id)]
    (if (and user (= pass (:password user)))
      (session/put! :user-id id))
(hendle-login 50211 "asd")
(handle-login 50211 "asd")
(hendle-login [50211 "asd"])
(handle-login [50211 "asd"])
(handle-login "50211" "asd")
(session/get)
(session-get :user-id)
(session/get :user-id)
(empty? " ")
(empty? [])
(doc session/get)
(empty? (session/get :user-id)
)
(session/put! :user-id 12)
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
(session/put! :user-id 12)
(session/put! :user-id "asd")
(session/put! :user id)
(session/put! :user 12)
session/key
(session/key)
(quit)
(ns myapp.routes.auth
  (:use compojure.core)
  (:require [myapp.layout :as layout]
            [noir.session :as session]
            [noir.response :as resp]
            [noir.validation :as vali]
            [noir.util.crypt :as crypt]
            [myapp.db.core :as db]))
(ns myapp.routes.auth
  (:use compojure.core)
  (:require [myapp.layout :as layout]
            [noir.session :as session]
            [noir.response :as resp]
            [noir.validation :as vali]
            [noir.util.crypt :as crypt]
            [myapp.db.core :as db]))
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(empty? (session/get :user-id)
)
(session/clear!)
(quit)
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(handle-login 50211 "asd")
(defn handle-login [id pass]
  (let [user (dbquery/get-user id)]
    (if (and user (= pass (:password user)))
      (session/put! :user-id id)
    (resp/redirect "/"))))
(handle-login 50211 "asd")
home-page 
(home-page )
(home-page)
 (handle-login 50211 "asd")
(session/put! :user-id 50211)
(ns myapp.db.core
  (:use korma.core
        [korma.db :only (defdb)])
  (:require [myapp.db.schema :as schema]))
(quit)
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(dbquery/get-user id)
(dbquery/get-user 12)
(dbquery/get-user 50211)
(defn handle-login [id pass]
  (let [user (dbquery/get-user id)]
    (if (= pass (:password user))
      (session/put! :user-id id)
      (resp/redirect "/"))))
(handle-login 50211 "sss")
(handle-login 50211 "asd")
(session/get)
(session/put! k v)
(session/put! :k v)
(session/put! :k 12)
(session/put :k 12)
(def user {:password "asd"})
user
(if (= 2 (:password user)) :true :false)
(if (= "asd" (:password user)) :t :f)
(defn handle-login [id pass]
                                                              (let [user (dbquery/get-user id)]
                                                                (if (= pass (:password user)) 
                                                                  :t :f) user))
(handle-login 50211 "s")
(defn handle-login [id pass]
                                                              (let [user (dbquery/get-user id)]
                                                                (if (= pass (:password user)) 
                                                                  :t :f)))
(handle-login 50211 "s")
(handle-login 50211 "asd")
(handle-login 23 "asd")
(defn handle-login [id pass]
  (let [user (dbquery/get-user id)]
    (if (and user (= pass (:password user))) :t :f)))
(handle-login 23 "asd")
(handle-login 50211 "asd")
(ns myapp.util
  (:require [noir.io :as io]
            [markdown.core :as md]
            [hiccup.form :as hf]
            [hiccup.core :as hc]
            [myapp.dbquery :as dbquery]
            [myapp.routes.home :as home]))
(def center-selection
  (hc/html
    (hf/drop-down "dropdwon-list" (for [center (dbquery/cost-on-center home/get-user)] (vals center)))))
(def center-selection
  (hc/html
    (hf/drop-down "dropdwon-list" (for [center (dbquery/cost-on-center 50211 #_(session/get :user))] (vals center)))))
(dbquery/cost-on-center 50211)
(dbquery/cost-on-center)
(quit)
(ns myapp.util
  (:require [noir.io :as io]
            [markdown.core :as md]
            [hiccup.form :as hf]
            [hiccup.core :as hc]
            [myapp.dbquery :as dbquery]
            [noir.session :as session]))
(dbquery/cost-on-center)
(dbquery/cost-on-center 50211)
(ns myapp.dbquery
(:require 
[clojure.java.jdbc :as j]
[clojure.java.jdbc.sql :as s]))
((ns myapp.dbquery
(:require 
[clojure.java.jdbc :as j]
(cost-on-center 50211)
(defn cost-on-center [user]
(j/query mysql-db
;#_["select distinct plannedOnCenter from cost_on_center"]
(s/select :id_cost :cost_type
(s/where {:id_cost 
(s/select :id_cost :cost_on_center 
(s/where {:planned_by user}))}))))
 cost-on-center
( cost-on-center)
( cost-on-center 0)
( cost-on-center 50211)
(defn cost-on-center [user]
(j/query mysql-db
;#_["select distinct plannedOnCenter from cost_on_center"]
(s/select :id_cost :cost_type
(s/join :cost_on_center {:id_cost})
(s/where {:id_cost 
(s/select :id_cost :cost_on_center 
(s/where {:planned_by user}))}))))
(defn cost-on-center [user]
(j/query mysql-db
;#_["select distinct plannedOnCenter from cost_on_center"]
(s/select :id_cost :cost_type
(s/join :cost_on_center {:cost_type.id_cost :cost_on_center.id_cost}
(s/where {:id_cost 
(s/select :id_cost :cost_on_center 
(s/where {:planned_by user}))})))))
(cost-on-center 50211)
 cost-on-center
( cost-on-center)
( cost-on-center 50211)
(s/where {:id 2})
(j/query mysql-db
;#_["select distinct plannedOnCenter f
(s/select :id_cost :cost_type
(s/join :cost_on_center {:cost_type.id
(s/where {:id_cost
(s/select :id_cost :cost_on_center
(s/where {:planned_by user}))})))))
(j/query mysql-db
;#_["select distinct plannedOn
(s/select :id_cost :cost_type
(s/join :cost_on_center {:cost
(s/where {:id_cost
(s/select :id_cost :cost_on_ce
(s/where {:planned_by user}))})
)
(j/query mysql-db
(s/select :id_cost :cost_type
(s/join :cost_on_center {:cost_type.id_cost :cost_on_center.id_cost}
(s/where {:id_cost 
(s/select :id_cost :cost_on_center 
(s/where {:planned_by user}))}))))
(j/query mysql-db
(s/select :id_cost :cost_type
(s/join :cost_on_center {:cost_type.id_cost :cost_on_center.id_cost}
(s/where {:id_cost 
(s/select :id_cost :cost_on_center 
(s/where {:planned_by 50211}))})))))
(s/join :cost_on_center {:cost_type.id_cost :cost_on_center.id_cost})
(s/where {:id_cost 
(s/select :id_cost :cost_on_center 
(s/where {:planned_by 50211}))}))
(cost-on-center 50211)
(cost-on-center)
(cost-on-center 50211)
(defn cost-on-center [user]
(j/query mysql-db
(s/select :cost_type.id_cost :cost_type
(s/join :cost_on_center {:cost_type.id_cost :cost_on_center.id_cost}
(s/where {:id_cost 
(s/select :id_cost :cost_on_center 
(s/where {:planned_by user}))})))))
 (cost-on-center 50211)
(defn cost-on-center [user]
(j/query mysql-db
["select cost_type.id_cost from cost_type inner join cost_on_center on cost_type.id_cost = cost_on_center.id_cost where cost_on_center.planned_by = ?" user]
#_(s/select :cost_type.id_cost :cost_type
(s/join :cost_on_center {:cost_type.id_cost :cost_on_center.id_cost}
(s/where {:id_cost 
(s/select :id_cost :cost_on_center 
(s/where {:planned_by user}))})))))
(cost-on-center 50211)
(ns myapp.util
  (:require [noir.io :as io]
            [markdown.core :as md]
            [hiccup.form :as hf]
            [hiccup.core :as hc]
            [myapp.dbquery :as dbquery]
            [noir.session :as session]))
center-selection
(def center-selection
  (hc/html
    (hf/drop-down "dropdwon-list" (for [center (dbquery/cost-on-center (session/get :user))] (vals center)))))
(session/get :user)
(ns myapp.routes.home
  (:use compojure.core)
  (:require 
    [myapp.layout :as layout]
    [myapp.util :as util]
    [myapp.dbquery :as dbquery]
    [ring.util.response :as resp]
    [hiccup.core :as hc]
    [noir.session :as session]))
(session/get :user)
(defn home-page []
  (layout/render
    "home.html" {:content (util/md->html "/md/docs.md")
                 :user-id (session/get :user)}))
((dbquery/cost-on-center 50211))
(dbquery/cost-on-center 50211)
(use 'noir.session)
(use noir.session)
(use '(noir.session))
(get :user)
(get)
(get :user 0)
(get asd_
)
(get :ks)
(get )
(put! :user 232)
(put!)
(put! 23 23
)
(defn get-user []
  (session/get :user))
get-user
(get-user)
get-user
(def center-selection
  (hc/html
    (hf/drop-down "dropdwon-list" (for [center (dbquery/cost-on-center get-user)] (vals center)))))
center-selection
(center-selection)
(meta center-selection)
